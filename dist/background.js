(()=>{"use strict";var t=function(t,e,o,n){return new(o||(o=Promise))((function(r,c){function s(t){try{a(n.next(t))}catch(t){c(t)}}function i(t){try{a(n.throw(t))}catch(t){c(t)}}function a(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,i)}a((n=n.apply(t,e||[])).next())}))};const e=()=>new Promise(((t,e)=>{const o=indexedDB.open("topic_url_state_db",1);o.onupgradeneeded=t=>{const e=t.target.result;if(!e.objectStoreNames.contains("topic_url_state_db_object_store")){const t=e.createObjectStore("topic_url_state_db_object_store",{keyPath:"id"});t.createIndex("topic","topic",{unique:!1}),t.createIndex("current_url","current_url",{unique:!1}),t.createIndex("last_topic","last_topic",{unique:!1}),t.put({id:"topic_url_state",topic:void 0,last_topic:void 0,current_url:void 0})}},o.onsuccess=()=>{t(o.result)},o.onerror=()=>{e(o.error)}}));function o(){return t(this,void 0,void 0,(function*(){const t=yield e();return new Promise(((e,o)=>{try{const n=t.transaction("topic_url_state_db_object_store","readonly").objectStore("topic_url_state_db_object_store").get("topic_url_state");n.onsuccess=()=>e(n.result),n.onerror=()=>o(n.error)}catch(t){o(t)}}))}))}var n=function(t,e,o,n){return new(o||(o=Promise))((function(r,c){function s(t){try{a(n.next(t))}catch(t){c(t)}}function i(t){try{a(n.throw(t))}catch(t){c(t)}}function a(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,i)}a((n=n.apply(t,e||[])).next())}))};chrome.runtime.onInstalled.addListener((t=>{"install"===t.reason?(console.log("Extension Installed Successfully - Upwork Extension"),chrome.storage.local.set({extension_enabled:!1})):"update"===t.reason&&console.log("Extension Updated Successfully - Upwork Extension")})),chrome.runtime.onMessage.addListener(((r,c,s)=>"check_extension_state"===r.task?(n(void 0,void 0,void 0,(function*(){try{const t=yield chrome.storage.local.get("extension_enabled");if(!("extension_enabled"in t))throw new Error("Unable to find extension state - extension_enabled, does not exist");s(t.extension_enabled)}catch(t){console.log(t,"from background.ts - check_extension_state")}})),!0):"update_extension_state"===r.task?(n(void 0,void 0,void 0,(function*(){try{if(!("current_state"in r))throw new Error("No Current State is provided to update_extension_state");const t=!r.current_state;chrome.storage.local.set({extension_enabled:t}),s({success:!0,newState:t})}catch(t){s({success:!1}),console.log(t,"from background.ts - update_extension_state",t)}})),!0):"get_combo_box_topic"===r.task?(n(void 0,void 0,void 0,(function*(){try{const t=(yield e()).transaction("topic_url_state_db_object_store","readonly").objectStore("topic_url_state_db_object_store").get("topic_url_state");t.onsuccess=()=>{s(t.result)}}catch(t){s({success:!1}),console.log(t,"from background.ts - get_combo_box_topic",t)}})),!0):"add_new_topic"===r.task?(n(void 0,void 0,void 0,(function*(){try{if(!("topic"in r))throw new Error("Please provide a topic.");const n=yield chrome.tabs.query({active:!0,currentWindow:!0});if(!n[0]||!n[0].url)throw new Error("Unable to retrieve the active tab or URL.");const{id:c,topic:i,last_topic:a,current_url:u}=yield o();yield function(o){return t(this,arguments,void 0,(function*({id:t,new_topic:o,current_url:n}){const r=yield e();return new Promise(((e,c)=>{const s=r.transaction("topic_url_state_db_object_store","readwrite").objectStore("topic_url_state_db_object_store").put({id:t,current_url:n,last_topic:o,topic:o});s.onsuccess=()=>{e()},s.onerror=()=>{c()}}))}))}({id:c,new_topic:r.topic,current_url:n[0].url});const d=yield o();s({success:!0,result:d})}catch(t){console.error("Error in background.ts - add_new_topic:",t),s({success:!1,error:t})}})),!0):"test_message"===r.task?(n(void 0,void 0,void 0,(function*(){const t=(yield e()).transaction("topic_url_state_db_object_store","readonly").objectStore("topic_url_state_db_object_store").get("topic_url_state");t.onsuccess=()=>{s(t.result)}})),!0):void 0)),chrome.tabs.onUpdated.addListener(((r,c,s)=>n(void 0,void 0,void 0,(function*(){if("complete"===c.status&&s.active&&s.url){console.log("hahaha");try{const{extension_enabled:n}=yield chrome.storage.local.get("extension_enabled"),r=yield o(),c=void 0===(null==r?void 0:r.last_topic)&&void 0===(null==r?void 0:r.topic);n&&!c&&(yield function(o){return t(this,void 0,void 0,(function*(){const t=yield e();return new Promise(((e,n)=>{const r=t.transaction("topic_url_state_db_object_store","readwrite").objectStore("topic_url_state_db_object_store"),c=r.get("topic_url_state");c.onsuccess=()=>{const t=c.result.last_topic,s=r.put(Object.assign(Object.assign({},c.result),{current_url:o,topic:t}));s.onsuccess=()=>{e()},s.onerror=()=>{n("put request error, UpdateUrlAndStateInDb")}}}))}))}(s.url),yield o())}catch(t){console.log(t,"from background.ts auto update tabs, tabs listener")}}}))))})();