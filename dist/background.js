(()=>{"use strict";var t=function(t,e,o,r){return new(o||(o=Promise))((function(n,c){function s(t){try{u(r.next(t))}catch(t){c(t)}}function i(t){try{u(r.throw(t))}catch(t){c(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,i)}u((r=r.apply(t,e||[])).next())}))};const e=()=>new Promise(((t,e)=>{const o=indexedDB.open("topic_url_state_db",1);o.onupgradeneeded=t=>{const e=t.target.result;if(!e.objectStoreNames.contains("topic_url_state_db_object_store")){const t=e.createObjectStore("topic_url_state_db_object_store",{keyPath:"id"});t.createIndex("topic","topic",{unique:!1}),t.createIndex("current_url","current_url",{unique:!1}),t.createIndex("last_topic","last_topic",{unique:!1}),t.put({id:"topic_url_state",topic:void 0,last_topic:void 0,current_url:void 0})}},o.onsuccess=()=>{t(o.result)},o.onerror=()=>{e(o.error)}}));function o(){return t(this,void 0,void 0,(function*(){const t=yield e();return new Promise(((e,o)=>{try{const r=t.transaction("topic_url_state_db_object_store","readonly").objectStore("topic_url_state_db_object_store").get("topic_url_state");r.onsuccess=()=>e(r.result),r.onerror=()=>o(r.error)}catch(t){o(t)}}))}))}const r=()=>new Promise(((t,e)=>{const o=indexedDB.open("milestone3db",1);o.onupgradeneeded=t=>{const e=t.target.result;e.objectStoreNames.contains("milestone3db_object_store")||e.createObjectStore("milestone3db_object_store",{keyPath:"url"})},o.onsuccess=()=>{t(o.result)},o.onerror=()=>{e(o.error)}})),n=e=>t(void 0,[e],void 0,(function*({current_url:t,last_topic:e,rating:o=0,status:n="none"}){const c=yield r();return new Promise(((r,s)=>{const i=c.transaction("milestone3db_object_store","readwrite").objectStore("milestone3db_object_store").add({url:t,topic:e,rating:o,status:n,visited_datetime:(new Date).toISOString()});i.onsuccess=()=>{r()},i.onerror=()=>{s(i.error)}}))})),c=e=>t(void 0,void 0,void 0,(function*(){const t=yield r();return new Promise(((o,r)=>{const n=t.transaction("milestone3db_object_store","readonly").objectStore("milestone3db_object_store").get(e);n.onsuccess=()=>{n.result?o(n.result):o({})},n.onerror=()=>{r(n.error)}}))})),s=()=>t(void 0,void 0,void 0,(function*(){const t=yield r();return new Promise(((e,o)=>{const r=t.transaction("milestone3db_object_store","readonly").objectStore("milestone3db_object_store").getAll();r.onsuccess=()=>{e(r.result)},r.onerror=()=>{o(r.error)}}))})),i=e=>t(void 0,[e],void 0,(function*({current_url:e,rating:o,status:n,topic:s}){const i=yield r();return new Promise(((r,u)=>t(void 0,void 0,void 0,(function*(){const t=yield c(e);"url"in t||u("url not found!");const a=i.transaction("milestone3db_object_store","readwrite").objectStore("milestone3db_object_store");n&&(t.status=n),o&&(t.rating=o),s&&(t.topic=s);const d=a.put(Object.assign(Object.assign({},t),{visited_datetime:(new Date).toISOString()}));d.onsuccess=()=>{r()},d.onerror=()=>{u(d.error)}}))))}));var u=function(t,e,o,r){return new(o||(o=Promise))((function(n,c){function s(t){try{u(r.next(t))}catch(t){c(t)}}function i(t){try{u(r.throw(t))}catch(t){c(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,i)}u((r=r.apply(t,e||[])).next())}))};chrome.runtime.onInstalled.addListener((t=>{"install"===t.reason?(console.log("Extension Installed Successfully - Upwork Extension"),chrome.storage.local.set({extension_enabled:!1})):"update"===t.reason&&console.log("Extension Updated Successfully - Upwork Extension")})),chrome.runtime.onMessage.addListener(((r,a,d)=>"check_extension_state"===r.task?(u(void 0,void 0,void 0,(function*(){try{const t=yield chrome.storage.local.get("extension_enabled");if(!("extension_enabled"in t))throw new Error("Unable to find extension state - extension_enabled, does not exist");d(t.extension_enabled)}catch(t){console.log(t,"from background.ts - check_extension_state")}})),!0):"update_extension_state"===r.task?(u(void 0,void 0,void 0,(function*(){try{if(!("current_state"in r))throw new Error("No Current State is provided to update_extension_state");const t=r.current_state;!0===t&&chrome.storage.local.set({extension_enabled:!1});const e=!t;chrome.storage.local.set({extension_enabled:e}),d({success:!0,newState:e})}catch(t){d({success:!1}),console.log(t,"from background.ts - update_extension_state",t)}})),!0):"get_combo_box_topic"===r.task?(u(void 0,void 0,void 0,(function*(){try{const t=(yield e()).transaction("topic_url_state_db_object_store","readonly").objectStore("topic_url_state_db_object_store").get("topic_url_state");t.onsuccess=()=>{d(t.result)}}catch(t){d({success:!1}),console.log(t,"from background.ts - get_combo_box_topic",t)}})),!0):"add_new_topic"===r.task?(u(void 0,void 0,void 0,(function*(){try{if(!("topic"in r))throw new Error("Please provide a topic.");const s=yield chrome.tabs.query({active:!0,currentWindow:!0});if(!s[0]||!s[0].url)throw new Error("Unable to retrieve the active tab or URL.");const{id:u,topic:a,last_topic:l,current_url:_}=yield o();yield function(o){return t(this,arguments,void 0,(function*({id:t,new_topic:o,current_url:r}){const n=yield e();return new Promise(((e,c)=>{const s=n.transaction("topic_url_state_db_object_store","readwrite").objectStore("topic_url_state_db_object_store").put({id:t,current_url:r,last_topic:o,topic:o});s.onsuccess=()=>{e()},s.onerror=()=>{c()}}))}))}({id:u,new_topic:r.topic,current_url:s[0].url});const b=yield c(s[0].url);b&&0!==Object.keys(b).length?yield i({current_url:s[0].url,topic:r.topic}):yield n({current_url:s[0].url,last_topic:r.topic});const p=yield o();d({success:!0,result:p})}catch(t){console.error("Error in background.ts - add_new_topic:",t),d({success:!1,error:t})}})),!0):"check_current_url"===r.task?(u(void 0,void 0,void 0,(function*(){try{const t=(yield chrome.tabs.query({active:!0,currentWindow:!0}))[0],e=yield c(t.url);d(e)}catch(t){console.log(t,"from check_current_url bg.ts"),d({success:!1,error:t})}})),!0):"get_allurl"===r.task?(u(void 0,void 0,void 0,(function*(){try{const t=yield s();d(t)}catch(t){console.log(t,"from check_current_url bg.ts"),d(t)}})),!0):"update_rating"===r.task?(u(void 0,void 0,void 0,(function*(){try{const t=yield o();if(void 0===(null==t?void 0:t.topic)||void 0===(null==t?void 0:t.last_topic))throw new Error("Please Add a topic first before trying to update rating!");const e=(yield chrome.tabs.query({active:!0,currentWindow:!0}))[0];if(!("url"in(yield c(e.url))))throw new Error("No Such entry in Db with this url! please try reloading.");if(!("new_rating"in r))throw new Error("No Rating value Found! Conrtact Developer");yield i({current_url:e.url,rating:r.new_rating});const n=yield c(e.url);d({success:!0,updated_rating:n.rating})}catch(t){t instanceof Error?d({success:!1,error:t.message}):d({success:!1,error:"unknown error occured  - check dev tool"})}})),!0):"update_status"===r.task?(u(void 0,void 0,void 0,(function*(){try{const t=yield o();if(void 0===(null==t?void 0:t.topic)||void 0===(null==t?void 0:t.last_topic))throw new Error("Please Add a topic first before trying to update status!");const e=(yield chrome.tabs.query({active:!0,currentWindow:!0}))[0];if(!("url"in(yield c(e.url))))throw new Error("cannot find url in milestone 3 db!");if(!("new_status"in r))throw new Error("No Status value Found! Conrtact Developer");yield i({current_url:e.url,status:r.new_status});const n=yield c(e.url);d({success:!0,updated_status:n.status})}catch(t){t instanceof Error?d({success:!1,error:t.message}):d({success:!1,error:"unknown error occured  - check dev tool"})}})),!0):void 0)),chrome.tabs.onUpdated.addListener(((r,c,i)=>u(void 0,void 0,void 0,(function*(){if("complete"===c.status&&i.active&&i.url)try{const{extension_enabled:r}=yield chrome.storage.local.get("extension_enabled"),c=yield o(),u=void 0===(null==c?void 0:c.last_topic)&&void 0===(null==c?void 0:c.topic);if(r&&!u){yield function(o){return t(this,void 0,void 0,(function*(){const t=yield e();return new Promise(((e,r)=>{const n=t.transaction("topic_url_state_db_object_store","readwrite").objectStore("topic_url_state_db_object_store"),c=n.get("topic_url_state");c.onsuccess=()=>{const t=c.result.last_topic,s=n.put(Object.assign(Object.assign({},c.result),{current_url:o,topic:t}));s.onsuccess=()=>{e()},s.onerror=()=>{r("put request error, UpdateUrlAndStateInDb")}}}))}))}(i.url);const r=yield o();yield n({current_url:i.url,last_topic:r.last_topic});const c=yield s();console.log(c,"background auto")}}catch(t){console.log(t,"from background.ts auto update tabs, tabs listener")}}))))})();